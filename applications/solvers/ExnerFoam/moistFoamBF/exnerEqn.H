{
    Psi = rho*pow(R*rho*theta/pRef*(1+rv/epsilon), kappa/(kappa-1));
    rho = Exner*Psi;
    rhof = fvc::interpolate(rho);
    
    surfaceScalarField G("G", 1/(1+offCentre*dt*muSponge));
    thetaRho = fvc::interpolate(theta*(1+rv/epsilon)/(1+rv+rl), "theta");

    for (int corr=0; corr<nCorr; corr++)
    {
        // Explicit part of rate of change of flux
        dVdt = -H.delta() &
        (
            fvc::interpolate(fvc::div(U,u))
         + (2*rhof*(Omega^(Uf-Ug)))
        );

        // Vu is the flux without g or dpdz (to get the BCs right)
        Vu = G*(V.oldTime() + offCentre*dt*dVdt);

        // add the gravity terms
        V = Vu + G*offCentre*dt*rhof*gd;

        // Flux in the normal direction (including off diagonal part of pressure
        // gradient)
        surfaceScalarField gradPcoeff = G*offCentre*Cp*dt
                                        *rhof*thetaRho;

        for (int nonOrth=0; nonOrth<=nNonOrthCorr; nonOrth++)
        {
            U = H.ddirToFlux(V)
              - H.ddirToFluxCorr(gradPcoeff*fvc::snGrad(Exner)*H.magd());

            fvScalarMatrix ExnerEqn
            (
                fvm::ddt(Psi, Exner)
              + (1-offCentre)*divU
              + offCentre*fvc::div(U)
              - fvm::laplacian(offCentre*gradPcoeff, Exner)
            );

            if(ucorr == nOuterCorr-1 && nonOrth == nNonOrthCorr && corr == nCorr-1)
            {
                ExnerEqn.solve(mesh.solver(Exner.name() + "Final"));
            }
            else
            {
                ExnerEqn.solve(mesh.solver(Exner.name()));
            }

            if (nonOrth == nNonOrthCorr)
            {
                U += ExnerEqn.flux()/offCentre;
                //Uv = U/rhof;
                V -= gradPcoeff*fvc::snGrad(Exner)*H.magd();
                u = H.reconstructd(V/rhof);
                Uf = fvc::interpolate(u);
            }
        }
    }
}
