/*---------------------------------------------------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.4                                   |
|   \\  /    A nd           | Web:      http://www.openfoam.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

FoamFile
{
    version         2.0;
    format          ascii;

    root            "";
    case            "";
    instance        "";
    local           "";

    class           dictionary;
    object          blockMeshDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// This file makes a 1D domain with cyclic boundary conditions


convertToMeters 1;

a 0.1666666667;
twoa 0.333333333;
foura 0.666666667;
threea 0.5;
sixa 1;
//am 4267.949192431;
//ap 7732.050807569;
am 6000;
ap 6000;

zheight 1;
ydepth 1;
ydepthhalf 0.5;

r1 1;
r2 1.2;
r3 -1;
r4 -1.2;
z1 0;
z2 1;
rt2 0.707106781;
rt22 0.848528137;
mrt2 -0.70710678;
mrt22 -0.848528137;


vertices
(
    ($r1 0 $z1)
    ($r1 0 $z2)
    ($r2 0 $z1)
    ($r2 0 $z2)

    (0 $r1 $z1)
    (0 $r1 $z2)
    (0 $r2 $z1)
    (0 $r2 $z2)

    ($r3 0 $z1)
    ($r3 0 $z2)
    ($r4 0 $z1)
    ($r4 0 $z2)
    
    (0 $r3 $z1)
    (0 $r3 $z2)
    (0 $r4 $z1)
    (0 $r4 $z2)

);

blocks
(
    hex (0 2 6 4 1 3 7 5) (1 25 1) simpleGrading (1 1 1)
    hex (4 6 10 8 5 7 11 9) (1 25 1) simpleGrading (1 1 1)
    hex (8 10 14 12 9 11 15 13) (1 25 1) simpleGrading (1 1 1)
    hex (12 14 2 0 13 15 3 1) (1 25 1) simpleGrading (1 1 1)
    
    //hex (0 2 8 6 9 11 17 15) (100 1 1) simpleGrading (1 1 1)
	// hex (0 1 4 3 9 10 13 12) (75 1 1) simpleGrading (1 1 1)
	// hex (1 2 5 4 10 11 14 13) (75 1 1) simpleGrading (1 1 1)
	// hex (3 4 7 6 12 13 16 15) (75 1 1) simpleGrading (1 1 1)
	// hex (4 5 8 7 13 14 17 16) (75 1 1) simpleGrading (1 1 1)
);

edges
(
    arc 0 4 ($rt2 $rt2 $z1)
    arc 1 5 ($rt2 $rt2 $z2)
    arc 2 6 ($rt22 $rt22 $z1)
    arc 3 7 ($rt22 $rt22 $z2) 

    arc 4 8 ($mrt2 $rt2 $z1)
    arc 5 9 ($mrt2 $rt2 $z2)
    arc 6 10 ($mrt22 $rt22 $z1)
    arc 7 11 ($mrt22 $rt22 $z2) 

    arc 8 12 ($mrt2 $mrt2 $z1)
    arc 9 13 ($mrt2 $mrt2 $z2)
    arc 10 14 ($mrt22 $mrt22 $z1)
    arc 11 15 ($mrt22 $mrt22 $z2) 

    arc 12 0 ($rt2 $mrt2 $z1)
    arc 13 1 ($rt2 $mrt2 $z2)
    arc 14 2 ($rt22 $mrt22 $z1)
    arc 15 3 ($rt22 $mrt22 $z2) 

);

boundary
(
//     outerShell
//     {
//         type            zeroGradient;
//         //faces           ((0 1 10 9) (1 2 11 10));
//         faces           ((0 2 11 9));// (1 2 11 10));
//     }
//     innerShell
//     {
//         type            zeroGradient;
//         //faces           ((15 16 7 6) (16 17 8 7));
//         faces           ((15 17 8 6));// (16 17 8 7));
//     }
//     inlet
//     {
// //        type            patch;
//         type cyclic;
//         neighbourPatch  outlet;
//         //faces           ((9 12 3 0) (12 15 6 3));
//         faces           ((9 15 6 0));// (12 15 6 3));        
//     }
//     outlet
//     {
// //        type            patch;
//         type cyclic;
//         neighbourPatch  inlet;
//         //faces           ((2 5 14 11) (5 8 17 14));
//         faces           ((2 8 17 11));// (5 8 17 14));        
//     }
//     z1
//     {
//         type            empty;
// //        neighbourPatch  back;
//         //faces           ((9 10 13 12) (10 11 14 13)
//         //                 (12 13 16 15) (13 14 17 16));
//         faces           ((9 11 17 15));
//     }
//     z0
//     {
//         type            empty;
// //        neighbourPatch  front;
//         //faces           ((0 3 4 1) (1 4 5 2) (3 6 7 4) (4 7 8 5));
//         faces           ((0 6 8 2));// (1 4 5 2) (3 6 7 4) (4 7 8 5));
//     }
);

mergePatchPairs
(
);

// ************************************************************************* //
